# 로드 밸런싱 알고리즘 예제

# 1. 라운드 로빈 (기본값)
http {
    upstream round_robin_backend {
        server 192.168.1.101:80;
        server 192.168.1.102:80;
        server 192.168.1.103:80;
    }
    
    server {
        listen 80;
        server_name round-robin.example.com;
        
        location / {
            proxy_pass http://round_robin_backend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
    }
}

# 2. 최소 연결
http {
    upstream least_conn_backend {
        least_conn;
        server 192.168.1.101:80;
        server 192.168.1.102:80;
        server 192.168.1.103:80;
    }
    
    server {
        listen 80;
        server_name least-conn.example.com;
        
        location / {
            proxy_pass http://least_conn_backend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
    }
}

# 3. IP 해시
http {
    upstream ip_hash_backend {
        ip_hash;
        server 192.168.1.101:80;
        server 192.168.1.102:80;
        server 192.168.1.103:80;
    }
    
    server {
        listen 80;
        server_name ip-hash.example.com;
        
        location / {
            proxy_pass http://ip_hash_backend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
    }
}

# 4. 가중치 기반 로드 밸런싱
http {
    upstream weighted_backend {
        server 192.168.1.101:80 weight=5;
        server 192.168.1.102:80 weight=3;
        server 192.168.1.103:80 weight=2;
    }
    
    server {
        listen 80;
        server_name weighted.example.com;
        
        location / {
            proxy_pass http://weighted_backend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
    }
}

# 5. 해시 (일관성 해시)
http {
    upstream hash_backend {
        hash $request_uri consistent;
        server 192.168.1.101:80;
        server 192.168.1.102:80;
        server 192.168.1.103:80;
    }
    
    server {
        listen 80;
        server_name hash.example.com;
        
        location / {
            proxy_pass http://hash_backend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
    }
}

# 6. 상태 확인과 장애 조치
http {
    upstream health_check_backend {
        server 192.168.1.101:80 max_fails=3 fail_timeout=30s;
        server 192.168.1.102:80 max_fails=3 fail_timeout=30s;
        server 192.168.1.103:80 max_fails=3 fail_timeout=30s backup;
    }
    
    server {
        listen 80;
        server_name health-check.example.com;
        
        location / {
            proxy_pass http://health_check_backend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # 실패 시 다음 서버로 전환
            proxy_next_upstream error timeout invalid_header http_500 http_502 http_503 http_504;
            proxy_next_upstream_tries 3;
            proxy_next_upstream_timeout 30s;
        }
    }
}

# 7. 동적 서버 추가/제거
http {
    upstream dynamic_backend {
        zone dynamic_backend 64k;
        server 192.168.1.101:80;
        server 192.168.1.102:80;
        keepalive 32;
    }
    
    server {
        listen 80;
        server_name dynamic.example.com;
        
        location / {
            proxy_pass http://dynamic_backend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
        
        # 동적 관리 API (상용 버전)
        location /api {
            allow 127.0.0.1;
            deny all;
            
            # API 엔드포인트 설정
            # POST /api/upstreams/dynamic_backend/servers
            # DELETE /api/upstreams/dynamic_backend/servers/{id}
        }
    }
}

# 8. 세션 유지 (Sticky Sessions)
http {
    upstream sticky_backend {
        sticky cookie srv_id expires=1h domain=.example.com path=/;
        server 192.168.1.101:80;
        server 192.168.1.102:80;
        server 192.168.1.103:80;
    }
    
    server {
        listen 80;
        server_name sticky.example.com;
        
        location / {
            proxy_pass http://sticky_backend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
    }
}

# 9. 다중 업스트림
http {
    # API 서버 그룹
    upstream api_servers {
        least_conn;
        server 192.168.1.101:8000;
        server 192.168.1.102:8000;
        server 192.168.1.103:8000;
    }
    
    # 웹 서버 그룹
    upstream web_servers {
        ip_hash;
        server 192.168.1.201:80;
        server 192.168.1.202:80;
        server 192.168.1.203:80;
    }
    
    server {
        listen 80;
        server_name multi-upstream.example.com;
        
        # API 요청
        location /api/ {
            proxy_pass http://api_servers;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
        
        # 웹 요청
        location / {
            proxy_pass http://web_servers;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
    }
}

# 10. 부하 분산과 캐싱 결합
http {
    proxy_cache_path /var/nginx/cache levels=1:2 keys_zone=load_balancer_cache:10m 
                     max_size=1g inactive=60m use_temp_path=off;
    
    upstream cached_backend {
        least_conn;
        server 192.168.1.101:80;
        server 192.168.1.102:80;
        server 192.168.1.103:80;
    }
    
    server {
        listen 80;
        server_name cached-lb.example.com;
        
        location / {
            proxy_cache load_balancer_cache;
            proxy_cache_key "$scheme$request_method$host$request_uri";
            proxy_cache_valid 200 5m;
            proxy_cache_valid 404 1m;
            
            add_header X-Proxy-Cache $upstream_cache_status;
            add_header X-Upstream-Addr $upstream_addr;
            
            proxy_pass http://cached_backend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
    }
}