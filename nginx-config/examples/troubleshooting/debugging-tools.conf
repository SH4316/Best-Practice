# 문제 해결 및 디버깅 설정 예제

# 1. 기본 디버깅 설정
# /etc/nginx/nginx.conf

user nginx;
worker_processes auto;
error_log /var/log/nginx/error.log warn;
pid /var/run/nginx.pid;

events {
    worker_connections 1024;
}

http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    
    # 디버깅 로그 형식
    log_format detailed '$remote_addr - $remote_user [$time_local] "$request" '
                       '$status $body_bytes_sent "$http_referer" '
                       '"$http_user_agent" "$http_x_forwarded_for" '
                       'rt=$request_time uct="$upstream_connect_time" '
                       'uht="$upstream_header_time" urt="$upstream_response_time" '
                       'req_id=$request_id';
    
    access_log /var/log/nginx/access.log detailed;
    
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    
    # 분산 추적을 위한 헤더
    map $http_x_request_id $request_id {
        default $http_x_request_id;
        "" $request_id;
    }
    
    server {
        listen 80;
        server_name localhost;
        
        # Nginx 상태 모니터링
        location /nginx_status {
            stub_status on;
            access_log off;
            allow 127.0.0.1;
            deny all;
        }
        
        # 요청 ID 생성
        set $request_id $request_id;
        if ($request_id = "") {
            set $request_id $request_id;
        }
        
        # 요청 ID 헤더 추가
        add_header X-Request-ID $request_id;
        
        location / {
            root /usr/share/nginx/html;
            index index.html;
        }
    }
}

# 2. SSL 디버깅 설정
server {
    listen 443 ssl http2;
    server_name ssl-debug.example.com;
    
    # SSL 설정
    ssl_certificate /etc/nginx/ssl/example.com.crt;
    ssl_certificate_key /etc/nginx/ssl/example.com.key;
    ssl_protocols TLSv1.2 TLSv1.3;
    
    # SSL 디버깅
    ssl_debug_log /var/log/nginx/ssl_debug.log;
    
    # SSL 세션 정보
    location /ssl_info {
        default_type text/plain;
        return 200 "SSL Protocol: $ssl_protocol\nSSL Cipher: $ssl_cipher\nSSL Session ID: $ssl_session_id\n";
        allow 127.0.0.1;
        deny all;
    }
    
    location / {
        root /var/www/html;
    }
}

# 3. 업스트림 디버깅 설정
upstream backend {
    server 192.168.1.101:8000 max_fails=3 fail_timeout=30s;
    server 192.168.1.102:8000 max_fails=3 fail_timeout=30s;
    server 192.168.1.103:8000 max_fails=3 fail_timeout=30s backup;
}

server {
    listen 80;
    server_name upstream-debug.example.com;
    
    # 업스트림 상태 모니터링
    location /upstream_status {
        stub_status on;
        access_log off;
        allow 127.0.0.1;
        deny all;
    }
    
    location / {
        proxy_pass http://backend;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # 업스트림 응답 헤더 추가
        add_header X-Upstream-Addr $upstream_addr;
        add_header X-Upstream-Status $upstream_status;
        add_header X-Upstream-Response-Time $upstream_response_time;
        add_header X-Upstream-Connect-Time $upstream_connect_time;
        add_header X-Upstream-Header-Time $upstream_header_time;
        
        # 실패 시 재시도 로깅
        proxy_next_upstream error timeout invalid_header http_500 http_502 http_503 http_504;
        proxy_next_upstream_tries 3;
        proxy_next_upstream_timeout 30s;
    }
}

# 4. 캐시 디버깅 설정
proxy_cache_path /var/nginx/cache levels=1:2 keys_zone=debug_cache:10m 
                 max_size=1g inactive=60m use_temp_path=off;

server {
    listen 80;
    server_name cache-debug.example.com;
    
    location / {
        proxy_cache debug_cache;
        proxy_cache_key "$scheme$request_method$host$request_uri";
        proxy_cache_valid 200 5m;
        proxy_cache_valid 404 1m;
        
        # 캐시 상태 헤더 추가
        add_header X-Cache-Status $upstream_cache_status;
        add_header X-Cache-Key "$scheme$request_method$host$request_uri";
        
        # 캐시 우바이 조건
        proxy_cache_bypass $http_pragma $http_authorization;
        proxy_no_cache $http_pragma $http_authorization;
        
        proxy_pass http://backend;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }
    
    # 캐시 관리 API
    location /cache_status {
        default_type text/plain;
        return 200 "Cache directory: /var/nginx/cache\nCache size: $(du -sh /var/nginx/cache)\n";
        allow 127.0.0.1;
        deny all;
    }
}

# 5. Lua 디버깅 설정 (Lua 모듈 필요)
server {
    listen 80;
    server_name lua-debug.example.com;
    
    # 요청 정보 디버깅
    location /debug_request {
        default_type text/plain;
        content_by_lua_block {
            ngx.say("Request URI: ", ngx.var.request_uri)
            ngx.say("Request Method: ", ngx.var.request_method)
            ngx.say("Remote Address: ", ngx.var.remote_addr)
            ngx.say("User Agent: ", ngx.var.http_user_agent)
            ngx.say("Request Headers:")
            for k, v in pairs(ngx.req.get_headers()) do
                ngx.say("  ", k, ": ", v)
            end
            ngx.say("Request Args:")
            for k, v in pairs(ngx.req.get_uri_args()) do
                ngx.say("  ", k, ": ", v)
            end
        }
        allow 127.0.0.1;
        deny all;
    }
    
    # 변수 값 디버깅
    location /debug_vars {
        default_type text/plain;
        content_by_lua_block {
            local vars = {"host", "uri", "request_uri", "args", "remote_addr", "request_method"}
            for _, var in ipairs(vars) do
                ngx.say(var, ": ", ngx.var[var])
            end
        }
        allow 127.0.0.1;
        deny all;
    }
    
    # 성능 측정
    location /debug_timing {
        default_type text/plain;
        content_by_lua_block {
            local start_time = ngx.now()
            
            -- 시간이 걸리는 작업 시뮬레이션
            ngx.sleep(0.1)
            
            local end_time = ngx.now()
            local duration = end_time - start_time
            
            ngx.say("Start time: ", start_time)
            ngx.say("End time: ", end_time)
            ngx.say("Duration: ", duration, " seconds")
        }
        allow 127.0.0.1;
        deny all;
    }
}

# 6. 메모리 사용량 모니터링
server {
    listen 80;
    server_name memory-debug.example.com;
    
    location /memory_status {
        default_type text/plain;
        content_by_lua_block {
            -- 메모리 사용량 정보
            local res = {}
            
            -- Nginx 워커 프로세스 메모리 정보
            local handle = io.popen("ps aux | grep nginx | grep -v grep")
            local result = handle:read("*a")
            handle:close()
            
            ngx.say("Nginx Process Memory Usage:")
            ngx.say(result)
            
            -- 시스템 메모리 정보
            handle = io.popen("free -h")
            result = handle:read("*a")
            handle:close()
            
            ngx.say("\nSystem Memory Usage:")
            ngx.say(result)
        }
        allow 127.0.0.1;
        deny all;
    }
}

# 7. 연결 상태 모니터링
server {
    listen 80;
    server_name connection-debug.example.com;
    
    location /connection_status {
        default_type text/plain;
        content_by_lua_block {
            -- 연결 상태 정보
            local res = {}
            
            -- 현재 연결 수
            local handle = io.popen("netstat -an | grep :80 | wc -l")
            local connections = handle:read("*a")
            handle:close()
            
            ngx.say("Current connections to port 80: ", connections)
            
            -- 활성 연결 상태
            handle = io.popen("ss -tuln | grep :80")
            result = handle:read("*a")
            handle:close()
            
            ngx.say("\nListening ports:")
            ngx.say(result)
        }
        allow 127.0.0.1;
        deny all;
    }
}

# 8. 설정 분석 도구
server {
    listen 80;
    server_name config-debug.example.com;
    
    location /config_analysis {
        default_type text/plain;
        content_by_lua_block {
            -- Nginx 설정 분석
            local handle = io.popen("nginx -T")
            local config = handle:read("*a")
            handle:close()
            
            -- 서버 블록 수
            local server_blocks = 0
            for line in config:gmatch("[^\r\n]+") do
                if line:match("server%s*{") then
                    server_blocks = server_blocks + 1
                end
            end
            
            ngx.say("Configuration Analysis:")
            ngx.say("Server blocks: ", server_blocks)
            
            -- 업스트림 블록 수
            local upstream_blocks = 0
            for line in config:gmatch("[^\r\n]+") do
                if line:match("upstream%s*%w+%s*{") then
                    upstream_blocks = upstream_blocks + 1
                end
            end
            
            ngx.say("Upstream blocks: ", upstream_blocks)
            
            -- 로케이션 블록 수
            local location_blocks = 0
            for line in config:gmatch("[^\r\n]+") do
                if line:match("location") then
                    location_blocks = location_blocks + 1
                end
            end
            
            ngx.say("Location blocks: ", location_blocks)
        }
        allow 127.0.0.1;
        deny all;
    }
}

# 9. 실시간 로그 모니터링
server {
    listen 80;
    server_name log-debug.example.com;
    
    location /real_time_logs {
        default_type text/plain;
        content_by_lua_block {
            -- 실시간 로그 스트리밍
            local handle = io.popen("tail -f /var/log/nginx/access.log")
            
            ngx.header.content_type = "text/plain"
            ngx.header["X-Accel-Buffering"] = "no"
            
            for line in handle:lines() do
                ngx.say(line)
                ngx.flush(true)
            end
            
            handle:close()
        }
        allow 127.0.0.1;
        deny all;
    }
}

# 10. 에러 시뮬레이션
server {
    listen 80;
    server_name error-simulation.example.com;
    
    # 다양한 에러 시뮬레이션
    location /simulate_404 {
        return 404 "Not Found - Simulated Error";
    }
    
    location /simulate_500 {
        return 500 "Internal Server Error - Simulated Error";
    }
    
    location /simulate_502 {
        return 502 "Bad Gateway - Simulated Error";
    }
    
    location /simulate_503 {
        return 503 "Service Unavailable - Simulated Error";
    }
    
    location /simulate_timeout {
        # 타임아웃 시뮬레이션
        content_by_lua_block {
            ngx.sleep(30)
            ngx.say("This should timeout")
        }
    }
    
    location /simulate_large_response {
        # 대용량 응답 시뮬레이션
        default_type text/plain;
        content_by_lua_block {
            for i = 1, 10000 do
                ngx.say("This is line ", i, " of a large response.")
            end
        }
    }
}

# 11. 성능 벤치마킹 도구
server {
    listen 80;
    server_name performance-debug.example.com;
    
    # 성능 측정 엔드포인트
    location /benchmark {
        default_type text/plain;
        content_by_lua_block {
            local start_time = ngx.now()
            
            -- CPU 집약적 작업
            local result = 0
            for i = 1, 1000000 do
                result = result + math.sqrt(i)
            end
            
            local end_time = ngx.now()
            local duration = end_time - start_time
            
            ngx.say("Benchmark completed in ", duration, " seconds")
            ngx.say("Result: ", result)
        }
        allow 127.0.0.1;
        deny all;
    }
    
    # 메모리 벤치마크
    location /memory_benchmark {
        default_type text/plain;
        content_by_lua_block {
            local start_time = ngx.now()
            
            -- 메모리 집약적 작업
            local data = {}
            for i = 1, 10000 do
                data[i] = string.rep("x", 1000)
            end
            
            local end_time = ngx.now()
            local duration = end_time - start_time
            
            ngx.say("Memory benchmark completed in ", duration, " seconds")
            ngx.say("Created ", #data, " strings")
        }
        allow 127.0.0.1;
        deny all;
    }
}

# 12. 헬스 체크 엔드포인트
server {
    listen 80;
    server_name health-check.example.com;
    
    # 기본 헬스 체크
    location /health {
        access_log off;
        return 200 "OK";
        add_header Content-Type text/plain;
    }
    
    # 상세 헬스 체크
    location /health/detailed {
        access_log off;
        default_type application/json;
        content_by_lua_block {
            local health = {
                status = "healthy",
                timestamp = ngx.time(),
                uptime = ngx.now() - ngx.ctx.start_time,
                connections = ngx.var.connections_active or 0,
                requests = ngx.var.requests or 0
            }
            
            ngx.say(ngx.encode(health))
        }
    }
    
    # 업스트림 헬스 체크
    location /health/upstream {
        access_log off;
        proxy_pass http://backend/health;
        proxy_set_header Host $host;
        proxy_connect_timeout 1s;
        proxy_send_timeout 1s;
        proxy_read_timeout 1s;
    }
}