# 기본 리버스 프록시 설정 예제

# 단일 백엔드 프록시
server {
    listen 80;
    server_name example.com;
    
    location / {
        proxy_pass http://127.0.0.1:3000;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }
}

# 프록시 헤더 최적화
server {
    listen 80;
    server_name optimized.example.com;
    
    location / {
        proxy_pass http://127.0.0.1:3000;
        
        # 기본 헤더 설정
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # 추가 헤더 설정
        proxy_set_header X-Forwarded-Host $host;
        proxy_set_header X-Forwarded-Port $server_port;
        proxy_set_header X-Original-URI $request_uri;
        
        # 프록시 타임아웃 설정
        proxy_connect_timeout 30s;
        proxy_send_timeout 30s;
        proxy_read_timeout 30s;
        
        # 버퍼링 설정
        proxy_buffering on;
        proxy_buffer_size 4k;
        proxy_buffers 8 4k;
        proxy_busy_buffers_size 8k;
    }
}

# 경로 기반 라우팅
server {
    listen 80;
    server_name multi-app.example.com;
    
    # 웹 애플리케이션
    location /app {
        proxy_pass http://127.0.0.1:3000;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # 경로 재작성
        rewrite ^/app/(.*)$ /$1 break;
    }
    
    # API 서버
    location /api {
        proxy_pass http://127.0.0.1:8000;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # API 특화 설정
        proxy_connect_timeout 30s;
        proxy_send_timeout 30s;
        proxy_read_timeout 30s;
        
        # CORS 헤더 추가
        add_header Access-Control-Allow-Origin *;
        add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS";
        add_header Access-Control-Allow-Headers "Content-Type, Authorization";
        
        # OPTIONS 요청 처리
        if ($request_method = OPTIONS) {
            return 204;
        }
    }
    
    # 정적 파일
    location / {
        root /var/www/static;
        try_files $uri $uri/ =404;
    }
}

# WebSocket 프록시
server {
    listen 80;
    server_name websocket.example.com;
    
    # WebSocket 업그레이드 지원
    location /socket.io {
        proxy_pass http://127.0.0.1:3000;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # WebSocket 타임아웃 설정
        proxy_read_timeout 86400;
        proxy_send_timeout 86400;
    }
    
    # 일반 HTTP 요청
    location / {
        proxy_pass http://127.0.0.1:3000;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }
}

# 헬스 체크 및 장애 조치
http {
    # 백엔드 서버 그룹 정의
    upstream backend {
        server 127.0.0.1:3000 max_fails=3 fail_timeout=30s;
        server 127.0.0.1:3001 max_fails=3 fail_timeout=30s backup;
        
        # 세션 유지 (필요시)
        # ip_hash;
    }
    
    server {
        listen 80;
        server_name ha.example.com;
        
        location / {
            proxy_pass http://backend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # 실패 시 다음 서버로 전환
            proxy_next_upstream error timeout invalid_header http_500 http_502 http_503 http_504;
            proxy_next_upstream_tries 3;
            proxy_next_upstream_timeout 30s;
        }
    }
}

# 프록시 캐싱
http {
    # 프록시 캐시 경로 설정
    proxy_cache_path /var/nginx/cache levels=1:2 keys_zone=api_cache:10m 
                     max_size=1g inactive=60m use_temp_path=off;
    
    server {
        listen 80;
        server_name cached-api.example.com;
        
        # API 엔드포인트 캐싱
        location /api/data {
            proxy_cache api_cache;
            proxy_cache_key "$scheme$request_method$host$request_uri";
            proxy_cache_valid 200 5m;
            proxy_cache_valid 404 1m;
            
            # 캐시 관련 헤더
            add_header X-Proxy-Cache $upstream_cache_status;
            
            # 캐시 우회 조건
            proxy_cache_bypass $http_pragma $http_authorization;
            proxy_no_cache $http_pragma $http_authorization;
            
            proxy_pass http://127.0.0.1:8000;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
        
        # 캐시되지 않는 API
        location /api/secure {
            proxy_pass http://127.0.0.1:8000;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
    }
}

# 보안 강화 프록시
server {
    listen 80;
    server_name secure-proxy.example.com;
    
    # 요청 크기 제한
    client_max_body_size 10M;
    
    # 요청 속도 제한
    limit_req_zone $binary_remote_addr zone=api:10m rate=10r/s;
    
    location / {
        limit_req zone=api burst=20 nodelay;
        
        # 보안 헤더 추가
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # 민감 헤더 제거
        proxy_hide_header X-Powered-By;
        proxy_hide_header Server;
        proxy_hide_header X-AspNet-Version;
        proxy_hide_header X-AspNetMvc-Version;
        
        # 프록시 리다이렉트 처리
        proxy_redirect off;
        proxy_intercept_errors on;
        
        # 에러 페이지 처리
        error_page 502 503 504 /50x.html;
        
        proxy_pass http://127.0.0.1:3000;
    }
    
    location = /50x.html {
        root /var/www/error;
    }
}

# 점진적 트래픽 전환
http {
    # IP 해시를 사용한 트래픽 분할
    split_clients "${remote_addr}" $backend {
        20%     http://127.0.0.1:3000;  # 구 버전 (20%)
        80%     http://127.0.0.1:3001;  # 신규 버전 (80%)
    }
    
    server {
        listen 80;
        server_name canary.example.com;
        
        location / {
            proxy_pass $backend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # 어떤 버전을 사용하는지 헤더 추가 (디버깅용)
            add_header X-Backend-Version $backend;
        }
    }
}