# 정적 웹사이트 서빙 예제
# /etc/nginx/conf.d/static-site.conf

server {
    listen 80;
    server_name static-site.com www.static-site.com;
    root /var/www/static-site;
    index index.html;
    
    # 접근 로그
    access_log /var/log/nginx/static-site.access.log;
    error_log /var/log/nginx/static-site.error.log;
    
    # 정적 파일 캐싱 설정
    location ~* \.(css|js|jpg|jpeg|png|gif|ico|svg|woff|woff2|ttf)$ {
        expires 1y;
        add_header Cache-Control "public, immutable";
        access_log off;
        
        # CORS 헤더
        add_header Access-Control-Allow-Origin "*";
    }
    
    # HTML 파일 캐싱
    location ~* \.(html)$ {
        expires 1h;
        add_header Cache-Control "public, must-revalidate";
    }
    
    # 기본 위치 처리
    location / {
        try_files $uri $uri/ =404;
    }
}

# 대용량 미디어 파일 서빙 예제
server {
    listen 80;
    server_name media-site.com;
    root /var/www/media;
    
    # 비디오 파일 스트리밍
    location ~* \.(mp4|mov|avi|wmv|flv|webm|mkv)$ {
        mp4;
        add_header Accept-Ranges bytes;
        expires 1y;
        add_header Cache-Control "public";
        
        # 다운로드 속도 제한 (필요시)
        # limit_rate 1m;
        
        # 타임아웃 증가
        client_body_timeout 300s;
        client_header_timeout 300s;
    }
    
    # 이미지 최적화
    location ~* \.(jpg|jpeg|png|gif)$ {
        expires 1y;
        add_header Cache-Control "public";
        
        # WebP 지원 (브라우저가 지원할 경우)
        add_header Vary Accept;
        try_files $uri$webp_suffix $uri =404;
    }
    
    location / {
        try_files $uri $uri/ =404;
    }
}

# 여러 도메인 호스팅 예제
server {
    listen 80;
    server_name site1.com www.site1.com;
    root /var/www/site1;
    index index.html;
    
    # 로그 분리
    access_log /var/log/nginx/site1.access.log;
    error_log /var/log/nginx/site1.error.log;
    
    location / {
        try_files $uri $uri/ =404;
    }
}

server {
    listen 80;
    server_name site2.com www.site2.com;
    root /var/www/site2;
    index index.html;
    
    # 로그 분리
    access_log /var/log/nginx/site2.access.log;
    error_log /var/log/nginx/site2.error.log;
    
    location / {
        try_files $uri $uri/ =404;
    }
}

# 하위 도메인 처리 예제
server {
    listen 80;
    server_name blog.example.com;
    root /var/www/blog;
    index index.php;
    
    access_log /var/log/nginx/blog.access.log;
    error_log /var/log/nginx/blog.error.log;
    
    location / {
        try_files $uri $uri/ /index.php?$query_string;
    }
    
    location ~ \.php$ {
        fastcgi_pass 127.0.0.1:9000;
        fastcgi_index index.php;
        include fastcgi_params;
    }
}

server {
    listen 80;
    server_name api.example.com;
    root /var/www/api;
    index index.php;
    
    access_log /var/log/nginx/api.access.log;
    error_log /var/log/nginx/api.error.log;
    
    location / {
        try_files $uri $uri/ /index.php?$query_string;
    }
    
    location ~ \.php$ {
        fastcgi_pass 127.0.0.1:9000;
        fastcgi_index index.php;
        include fastcgi_params;
    }
}

# 보안 강화 웹 서버 예제
server {
    listen 80;
    server_name secure-site.com;
    root /var/www/secure-site;
    
    # 서버 정보 숨김
    server_tokens off;
    
    # 불필요한 HTTP 메소드 차단
    if ($request_method !~ ^(GET|HEAD|POST)$ ) {
        return 405;
    }
    
    # 숨길 파일 및 디렉토리
    location ~ /\. {
        deny all;
        access_log off;
        log_not_found off;
    }
    
    # 백업 및 임시 파일 접근 차단
    location ~* \.(bak|backup|old|orig|save|tmp)$ {
        deny all;
    }
    
    # 보안 헤더 추가
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header Referrer-Policy "strict-origin-when-cross-origin" always;
    
    # 클라이언트 요청 크기 제한
    client_max_body_size 10M;
    
    # 연결 제한
    limit_conn_zone $binary_remote_addr zone=addr:10m;
    limit_conn addr 10;
    
    location / {
        try_files $uri $uri/ =404;
    }
}

# 커스텀 에러 페이지 처리 예제
server {
    listen 80;
    server_name example.com;
    root /var/www/example;
    
    # 커스텀 에러 페이지
    error_page 404 /404.html;
    error_page 500 502 503 504 /50x.html;
    
    # 에러 페이지 위치
    location = /404.html {
        root /var/www/error;
        internal;
    }
    
    location = /50x.html {
        root /var/www/error;
        internal;
    }
    
    # API 에러 처리
    location /api {
        error_page 502 = @api_down;
        proxy_pass http://backend;
    }
    
    location @api_down {
        return 200 '{"status": "error", "message": "Service temporarily unavailable"}';
        add_header Content-Type application/json;
    }
    
    location / {
        try_files $uri $uri/ =404;
    }
}