# SSL/TLS 설정 예제

# 1. 기본 SSL 설정
server {
    listen 443 ssl;
    server_name basic-ssl.example.com;
    
    # SSL 인증서 경로
    ssl_certificate /etc/nginx/ssl/basic-ssl.example.com.crt;
    ssl_certificate_key /etc/nginx/ssl/basic-ssl.example.com.key;
    
    root /var/www/html;
    index index.html;
    
    location / {
        try_files $uri $uri/ =404;
    }
}

# 2. 보안 강화 SSL 설정
server {
    listen 443 ssl http2;
    server_name secure-ssl.example.com;
    
    # SSL 인증서 경로
    ssl_certificate /etc/nginx/ssl/secure-ssl.example.com.crt;
    ssl_certificate_key /etc/nginx/ssl/secure-ssl.example.com.key;
    
    # SSL 프로토콜 설정 (오래된 프로토콜 제외)
    ssl_protocols TLSv1.2 TLSv1.3;
    
    # 암호화 스위트 설정 (안전한 순서로)
    ssl_ciphers ECDHE-RSA-AES256-GCM-SHA512:DHE-RSA-AES256-GCM-SHA512:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES256-GCM-SHA384;
    ssl_prefer_server_ciphers off;
    
    # SSL 세션 설정
    ssl_session_cache shared:SSL:10m;
    ssl_session_timeout 10m;
    ssl_session_tickets off;
    
    # OCSP Stapling
    ssl_stapling on;
    ssl_stapling_verify on;
    resolver 8.8.8.8 8.8.4.4 valid=300s;
    resolver_timeout 5s;
    
    # 보안 헤더
    add_header Strict-Transport-Security "max-age=63072000; includeSubDomains; preload" always;
    add_header X-Frame-Options DENY always;
    add_header X-Content-Type-Options nosniff always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header Referrer-Policy "strict-origin-when-cross-origin" always;
    
    root /var/www/html;
    index index.html;
    
    location / {
        try_files $uri $uri/ =404;
    }
}

# 3. HTTP에서 HTTPS로 리디렉션
# HTTP 서버 블록 (HTTPS로 리디렉션)
server {
    listen 80;
    server_name redirect.example.com www.redirect.example.com;
    
    # HTTPS로 영구 리디렉션
    return 301 https://$host$request_uri;
}

# HTTPS 서버 블록
server {
    listen 443 ssl http2;
    server_name redirect.example.com www.redirect.example.com;
    
    # SSL 설정
    ssl_certificate /etc/nginx/ssl/redirect.example.com.crt;
    ssl_certificate_key /etc/nginx/ssl/redirect.example.com.key;
    
    # 보안 설정
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers ECDHE-RSA-AES256-GCM-SHA512:DHE-RSA-AES256-GCM-SHA512:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES256-GCM-SHA384;
    ssl_prefer_server_ciphers off;
    ssl_session_cache shared:SSL:10m;
    ssl_session_timeout 10m;
    ssl_session_tickets off;
    
    # HSTS 헤더
    add_header Strict-Transport-Security "max-age=63072000; includeSubDomains; preload" always;
    
    root /var/www/html;
    index index.html;
    
    location / {
        try_files $uri $uri/ =404;
    }
}

# 4. Let's Encrypt 인증서 설정
server {
    server_name letsencrypt.example.com www.letsencrypt.example.com;
    root /var/www/html;
    index index.html;
    
    location / {
        try_files $uri $uri/ =404;
    }
    
    listen 443 ssl; # managed by Certbot
    ssl_certificate /etc/letsencrypt/live/letsencrypt.example.com/fullchain.pem; # managed by Certbot
    ssl_certificate_key /etc/letsencrypt/live/letsencrypt.example.com/privkey.pem; # managed by Certbot
    include /etc/letsencrypt/options-ssl-nginx.conf; # managed by Certbot
    ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem; # managed by Certbot
}

server {
    if ($host = www.letsencrypt.example.com) {
        return 301 https://$host$request_uri;
    } # managed by Certbot
    
    if ($host = letsencrypt.example.com) {
        return 301 https://$host$request_uri;
    } # managed by Certbot
    
    listen 80;
    server_name letsencrypt.example.com www.letsencrypt.example.com;
    return 404; # managed by Certbot
}

# 5. 와일드카드 인증서 설정
# 모든 서브도메인에 적용되는 설정
server {
    listen 443 ssl http2;
    server_name ~^(?<subdomain>.+)\.wildcard\.example\.com$;
    
    # 와일드카드 인증서
    ssl_certificate /etc/letsencrypt/live/wildcard.example.com/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/wildcard.example.com/privkey.pem;
    
    # SSL 보안 설정
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers ECDHE-RSA-AES256-GCM-SHA512:DHE-RSA-AES256-GCM-SHA512:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES256-GCM-SHA384;
    ssl_prefer_server_ciphers off;
    ssl_session_cache shared:SSL:10m;
    ssl_session_timeout 10m;
    ssl_session_tickets off;
    
    # 서브도메인별 루트 디렉토리 설정
    root /var/www/$subdomain;
    index index.html;
    
    location / {
        try_files $uri $uri/ =404;
    }
}

# 도메인 리디렉션
server {
    listen 80;
    server_name .wildcard.example.com;
    return 301 https://$host$request_uri;
}

# 6. SSL/TLS 튜닝 및 최적화
server {
    listen 443 ssl http2;
    server_name optimized.example.com;
    
    # SSL 인증서
    ssl_certificate /etc/nginx/ssl/optimized.example.com.crt;
    ssl_certificate_key /etc/nginx/ssl/optimized.example.com.key;
    
    # SSL 프로토콜 및 암호화
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers ECDHE-RSA-AES256-GCM-SHA512:DHE-RSA-AES256-GCM-SHA512:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES256-GCM-SHA384;
    ssl_prefer_server_ciphers off;
    
    # SSL 세션 최적화
    ssl_session_cache shared:SSL:50m;
    ssl_session_timeout 1d;
    ssl_session_tickets off;
    
    # OCSP Stapling
    ssl_stapling on;
    ssl_stapling_verify on;
    resolver 8.8.8.8 8.8.4.4 valid=300s;
    resolver_timeout 5s;
    
    # HTTP/2 설정
    http2_max_concurrent_streams 128;
    http2_max_field_size 4k;
    http2_max_header_size 16k;
    http2_max_requests 1000;
    
    # SSL 리디렉션 캐싱
    error_page 497 301 =307 https://$host:$server_port$request_uri;
    
    root /var/www/html;
    index index.html;
    
    location / {
        try_files $uri $uri/ =404;
    }
}

# 7. Mutual TLS (mTLS) 설정
server {
    listen 443 ssl http2;
    server_name mtls.example.com;
    
    # 서버 인증서
    ssl_certificate /etc/nginx/ssl/mtls.example.com.crt;
    ssl_certificate_key /etc/nginx/ssl/mtls.example.com.key;
    
    # 클라이언트 인증서 검증
    ssl_client_certificate /etc/nginx/ssl/ca.crt;
    ssl_verify_client on;
    ssl_verify_depth 2;
    
    # SSL 보안 설정
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers ECDHE-RSA-AES256-GCM-SHA512:DHE-RSA-AES256-GCM-SHA512:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES256-GCM-SHA384;
    ssl_prefer_server_ciphers off;
    ssl_session_cache shared:SSL:10m;
    ssl_session_timeout 10m;
    ssl_session_tickets off;
    
    location / {
        # 클라이언트 인증서 정보 추출
        if ($ssl_client_verify != SUCCESS) {
            return 403;
        }
        
        # 클라이언트 정보 헤더 추가
        proxy_set_header X-SSL-Client-DN $ssl_client_s_dn;
        proxy_set_header X-SSL-Client-Verify $ssl_client_verify;
        
        proxy_pass http://backend;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }
}

# 8. SSL/TLS 모니터링
server {
    listen 80;
    server_name localhost;
    
    location /ssl-status {
        stub_status on;
        access_log off;
        allow 127.0.0.1;
        deny all;
    }
    
    location /cert-info {
        default_type text/plain;
        return 200 "Domain: $ssl_server_name\nProtocol: $ssl_protocol\nCipher: $ssl_cipher\n";
        allow 127.0.0.1;
        deny all;
    }
}

# 9. 다중 SSL 설정
http {
    # SSL 설정 공통화
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers ECDHE-RSA-AES256-GCM-SHA512:DHE-RSA-AES256-GCM-SHA512:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES256-GCM-SHA384;
    ssl_prefer_server_ciphers off;
    ssl_session_cache shared:SSL:10m;
    ssl_session_timeout 10m;
    ssl_session_tickets off;
    ssl_stapling on;
    ssl_stapling_verify on;
    resolver 8.8.8.8 8.8.4.4 valid=300s;
    resolver_timeout 5s;
    
    # 보안 헤더 공통화
    add_header Strict-Transport-Security "max-age=63072000; includeSubDomains; preload" always;
    add_header X-Frame-Options DENY always;
    add_header X-Content-Type-Options nosniff always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header Referrer-Policy "strict-origin-when-cross-origin" always;
    
    # 첫 번째 도메인
    server {
        listen 443 ssl http2;
        server_name domain1.example.com;
        
        ssl_certificate /etc/nginx/ssl/domain1.example.com.crt;
        ssl_certificate_key /etc/nginx/ssl/domain1.example.com.key;
        
        root /var/www/domain1;
        index index.html;
        
        location / {
            try_files $uri $uri/ =404;
        }
    }
    
    # 두 번째 도메인
    server {
        listen 443 ssl http2;
        server_name domain2.example.com;
        
        ssl_certificate /etc/nginx/ssl/domain2.example.com.crt;
        ssl_certificate_key /etc/nginx/ssl/domain2.example.com.key;
        
        root /var/www/domain2;
        index index.html;
        
        location / {
            try_files $uri $uri/ =404;
        }
    }
}