# 보안 강화 설정 예제

# 1. 기본 보안 설정
# /etc/nginx/nginx.conf

http {
    # 서버 정보 숨김
    server_tokens off;
    
    # 서버 이름 변경 (선택사항)
    server_name_in_redirect off;
    
    # 보안 로그 형식
    log_format security '$remote_addr - $remote_user [$time_local] "$request" '
                       '$status $body_bytes_sent "$http_referer" '
                       '"$http_user_agent" "$http_x_forwarded_for" '
                       'rt=$request_time uc=$upstream_cache_status';
    
    # 보안 로그 파일
    access_log /var/log/nginx/security.log security;
    
    server {
        listen 80;
        server_name example.com;
        root /var/www/html;
        
        # 불필요한 HTTP 메소드 차단
        if ($request_method !~ ^(GET|HEAD|POST)$ ) {
            return 405;
        }
        
        location / {
            try_files $uri $uri/ =404;
        }
    }
}

# 2. 보안 헤더 설정
server {
    listen 80;
    server_name secure-headers.example.com;
    root /var/www/html;
    
    # 보안 헤더 추가
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header Referrer-Policy "strict-origin-when-cross-origin" always;
    add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline'; style-src 'self' 'unsafe-inline'; img-src 'self' data: https:; font-src 'self' data:;" always;
    
    location / {
        try_files $uri $uri/ =404;
    }
}

# 3. 엄격한 CSP 정책
server {
    listen 443 ssl;
    server_name strict-csp.example.com;
    root /var/www/html;
    
    # SSL 설정
    ssl_certificate /etc/nginx/ssl/strict-csp.example.com.crt;
    ssl_certificate_key /etc/nginx/ssl/strict-csp.example.com.key;
    
    # 엄격한 CSP 정책
    add_header Content-Security-Policy "default-src 'self'; script-src 'self'; style-src 'self'; img-src 'self' data:; font-src 'self'; connect-src 'self'; frame-ancestors 'none'; form-action 'self';" always;
    
    # HSTS
    add_header Strict-Transport-Security "max-age=63072000; includeSubDomains; preload" always;
    
    location / {
        try_files $uri $uri/ =404;
    }
}

# 4. IP 기반 접근 제어
server {
    listen 80;
    server_name ip-restriction.example.com;
    root /var/www/html;
    
    # 관리자 페이지 IP 제한
    location /admin {
        allow 192.168.1.0/24;
        allow 10.0.0.0/8;
        allow 127.0.0.1;
        deny all;
        
        try_files $uri $uri/ =404;
    }
    
    # API 엔드포인트 IP 제한
    location /api/admin {
        allow 192.168.1.100;
        allow 10.0.0.50;
        deny all;
        
        proxy_pass http://backend;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }
    
    location / {
        try_files $uri $uri/ =404;
    }
}

# 5. 기본 인증 (Basic Authentication)
server {
    listen 80;
    server_name basic-auth.example.com;
    root /var/www/html;
    
    # 관리자 페이지 기본 인증
    location /admin {
        auth_basic "Restricted Area";
        auth_basic_user_file /etc/nginx/.htpasswd;
        
        try_files $uri $uri/ =404;
    }
    
    # API 엔드포인트 기본 인증
    location /api/secure {
        auth_basic "API Access";
        auth_basic_user_file /etc/nginx/.api_htpasswd;
        
        proxy_pass http://backend;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }
    
    location / {
        try_files $uri $uri/ =404;
    }
}

# 6. 요청 속도 제한
http {
    # 속도 제한 영역 정의
    limit_req_zone $binary_remote_addr zone=one:10m rate=10r/s;
    limit_req_zone $binary_remote_addr zone=api:10m rate=5r/s;
    limit_req_zone $binary_remote_addr zone=admin:10m rate=1r/s;
    
    server {
        listen 80;
        server_name rate-limiting.example.com;
        root /var/www/html;
        
        # 일반 요청 속도 제한
        location / {
            limit_req zone=one burst=20 nodelay;
            
            try_files $uri $uri/ =404;
        }
        
        # API 요청 속도 제한
        location /api/ {
            limit_req zone=api burst=10 nodelay;
            
            proxy_pass http://backend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
        
        # 관리자 페이지 속도 제한
        location /admin {
            limit_req zone=admin burst=5 nodelay;
            
            try_files $uri $uri/ =404;
        }
    }
}

# 7. 연결 수 제한
http {
    # 연결 제한 영역 정의
    limit_conn_zone $binary_remote_addr zone=addr:10m;
    limit_conn_zone $server_name zone=servers:10m;
    
    server {
        listen 80;
        server_name conn-limit.example.com;
        root /var/www/html;
        
        # 클라이언트당 연결 수 제한
        limit_conn addr 10;
        
        # 서버당 총 연결 수 제한
        limit_conn servers 100;
        
        location / {
            try_files $uri $uri/ =404;
        }
    }
}

# 8. 파일 접근 제어
server {
    listen 80;
    server_name file-restriction.example.com;
    root /var/www/html;
    
    # 숨김 파일 및 디렉토리 접근 차단
    location ~ /\. {
        deny all;
        access_log off;
        log_not_found off;
    }
    
    # 백업 및 임시 파일 접근 차단
    location ~* \.(bak|backup|old|orig|save|tmp|log|sql)$ {
        deny all;
        access_log off;
        log_not_found off;
    }
    
    # 설정 파일 접근 차단
    location ~* \.(conf|config|ini|htaccess|htpasswd)$ {
        deny all;
        access_log off;
        log_not_found off;
    }
    
    # 소스 코드 파일 접근 차단
    location ~* \.(inc|tpl|py|pl|sh|rb)$ {
        deny all;
        access_log off;
        log_not_found off;
    }
    
    # 특정 디렉토리 접근 제어
    location ~ ^/(config|backup|logs|tmp)/ {
        deny all;
        access_log off;
        log_not_found off;
    }
    
    location / {
        try_files $uri $uri/ =404;
    }
}

# 9. 다단계 DDoS 방어
http {
    # 속도 제한 영역 정의
    limit_req_zone $binary_remote_addr zone=global:10m rate=100r/s;
    limit_req_zone $binary_remote_addr zone=strict:10m rate=10r/s;
    limit_req_zone $binary_remote_addr zone=api:10m rate=5r/s;
    
    # 연결 제한 영역 정의
    limit_conn_zone $binary_remote_addr zone=conn_limit:10m;
    
    # 요청 크기 제한
    client_max_body_size 10M;
    client_header_buffer_size 1k;
    large_client_header_buffers 4 4k;
    
    server {
        listen 80;
        server_name ddos-protection.example.com;
        root /var/www/html;
        
        # 전역 속도 제한
        limit_req zone=global burst=200 nodelay;
        
        # 연결 수 제한
        limit_conn conn_limit 20;
        
        # 의심스러운 요청 필터링
        if ($http_user_agent ~* (bot|crawler|spider|scraper)) {
            limit_req zone=strict burst=5 nodelay;
        }
        
        # 정적 파일 (더 높은 제한)
        location ~* \.(css|js|jpg|jpeg|png|gif|ico|svg|woff|woff2|ttf)$ {
            limit_req zone=global burst=500 nodelay;
            expires 1y;
            add_header Cache-Control "public, immutable";
            access_log off;
        }
        
        # API 엔드포인트 (더 엄격한 제한)
        location /api/ {
            limit_req zone=api burst=10 nodelay;
            
            proxy_pass http://backend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
        
        location / {
            limit_req zone=strict burst=20 nodelay;
            try_files $uri $uri/ =404;
        }
    }
}

# 10. 간단한 WAF 규칙
server {
    listen 80;
    server_name simple-waf.example.com;
    root /var/www/html;
    
    # SQL 인젝션 방어
    if ($args ~* "union.*select.*\(") {
        return 403;
    }
    
    if ($args ~* "concat.*\(") {
        return 403;
    }
    
    # XSS 방어
    if ($args ~* "<script") {
        return 403;
    }
    
    if ($args ~* "javascript:") {
        return 403;
    }
    
    # 경로 순회 공격 방어
    if ($uri ~* "\.\./") {
        return 403;
    }
    
    # 보안 헤더
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header Referrer-Policy "strict-origin-when-cross-origin" always;
    
    location / {
        try_files $uri $uri/ =404;
    }
}

# 11. 보안 모니터링
http {
    server {
        listen 80;
        server_name security-monitoring.example.com;
        root /var/www/html;
        
        # 보안 헤더
        add_header X-Frame-Options "SAMEORIGIN" always;
        add_header X-Content-Type-Options "nosniff" always;
        add_header X-XSS-Protection "1; mode=block" always;
        add_header Referrer-Policy "strict-origin-when-cross-origin" always;
        
        # 의심스러운 활동 로깅
        location / {
            # 4xx 및 5xx 응답 로깅
            if ($status >= 400) {
                access_log /var/log/nginx/security.log security;
            }
            
            try_files $uri $uri/ =404;
        }
        
        # 관리자 페이지 접근 로깅
        location /admin {
            access_log /var/log/nginx/admin_access.log security;
            
            try_files $uri $uri/ =404;
        }
        
        # 보안 상태 페이지
        location /security-status {
            stub_status on;
            access_log off;
            allow 127.0.0.1;
            deny all;
        }
    }
}

# 12. ModSecurity 연동 (ModSecurity 모듈 필요)
http {
    # ModSecurity 설정
    modsecurity on;
    modsecurity_rules_file /etc/nginx/modsec/main.conf;
    
    server {
        listen 80;
        server_name modsecurity.example.com;
        root /var/www/html;
        
        # ModSecurity 활성화
        modsecurity on;
        
        location / {
            try_files $uri $uri/ =404;
        }
        
        # API 엔드포인트에 더 엄격한 규칙 적용
        location /api/ {
            modsecurity_rules '
                SecRuleEngine On
                SecRule ARGS "@detectSQLi" "id:1001,phase:2,deny,status:403,msg:\'SQL Injection Attack Detected\'"
                SecRule ARGS "@detectXSS" "id:1002,phase:2,deny,status:403,msg:\'XSS Attack Detected\'"
            ';
            
            proxy_pass http://backend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
    }
}